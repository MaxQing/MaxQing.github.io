{"title":"Application layer(Basic and Web)","slug":"Application layer_1","date":"2021-05-27T03:36:20.135Z","updated":"2021-05-27T03:36:59.936Z","comments":true,"excerpt":"","content":"<h1 id=\"Application-layer-Basic-and-Web\"><a href=\"#Application-layer-Basic-and-Web\" class=\"headerlink\" title=\"Application layer (Basic and Web)\"></a>Application layer (Basic and Web)</h1><h2 id=\"Principles-of-Network-Applications\"><a href=\"#Principles-of-Network-Applications\" class=\"headerlink\" title=\"Principles of Network Applications\"></a>Principles of Network Applications</h2><h3 id=\"Network-Application-Architectures\"><a href=\"#Network-Application-Architectures\" class=\"headerlink\" title=\"Network Application Architectures\"></a>Network Application Architectures</h3><p>Client-server architecture: server(always-on), which services requests from many other hosts(client). But this architecture very depends on <strong>data center</strong>.</p>\n<p>(<em>like as <code>Web</code>, <code>FTP</code>, <code>Telnet</code> and <code>email</code></em>)</p>\n<p>The P2P architecture: minimal reliance(or no) on dedicated servers. The applications exploits direct communication between <em><strong>peers</strong></em>.</p>\n<p>(P2P has the <strong>self-scalability</strong>) </p>\n<h3 id=\"Processing-Communication\"><a href=\"#Processing-Communication\" class=\"headerlink\" title=\"Processing Communication\"></a>Processing Communication</h3><p>Processes on two different end systems communicate with each other by exchanging <em><strong>messages</strong></em> across the computer network.</p>\n<p>It is processes that communicate in essence.(Not programs)</p>\n<ul>\n<li><p>Client and Server Processes</p>\n<p>The network application comprises of pairs of processes that send messages to each other over a network.</p>\n<p>How to distinguish client and server?</p>\n<ul>\n<li><em><strong>Client</strong></em>-&gt;initially contacts the other process at the beginning of the session.</li>\n<li><em><strong>Server</strong></em>-&gt;waits to be contacted to begin the session is the server</li>\n</ul>\n</li>\n<li><p>The interface between processes and network</p>\n<p>The particular interface is called <em><strong>socket</strong></em>. Process sends messages into and receives messages from it.</p>\n</li>\n<li><p>Addressing Process</p>\n<p>two things:</p>\n<ul>\n<li><em><strong>IP address</strong></em> (uniquely identify the host)</li>\n<li><em><strong>port number</strong></em> (indicate the process to receive messages)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Transport-Services-Available-to-Applications\"><a href=\"#Transport-Services-Available-to-Applications\" class=\"headerlink\" title=\"Transport Services Available to Applications\"></a>Transport Services Available to Applications</h3><p>Classification index:</p>\n<ul>\n<li><p>Reliable Data Transport</p>\n<p>Guarantee the data sent by one end of the application is delivered <strong>correctly</strong> and <strong>completely</strong> to the other end of the application.</p>\n<p><em>(like as <code>Email</code>, <code>file transfer</code>, <code>financial apps</code>)</em></p>\n<p>(Conversely, some apps can endure the loss of data that called loss-tolerant application. Like as <code>Multimedia apps</code>.)</p>\n</li>\n<li><p>Throughput</p>\n<p>Guarantee available throughput at some specified rate. (Because the available throughput is fluctuate with time)</p>\n<p>(like as <code>Multimedia apps</code>)</p>\n<p>(the <em><strong>elastic apps</strong></em> don’t need the invariable rate. like as <code>email</code>, <code>file transfer</code>.)</p>\n</li>\n<li><p>Timing</p>\n<p>Game player.</p>\n</li>\n<li><p>Security</p>\n<p>data integrity and end-point authentication.</p>\n</li>\n</ul>\n<h3 id=\"Transport-Services-Provided-by-the-Internet\"><a href=\"#Transport-Services-Provided-by-the-Internet\" class=\"headerlink\" title=\"Transport Services Provided by the Internet\"></a>Transport Services Provided by the Internet</h3><h4 id=\"TCP-Services\"><a href=\"#TCP-Services\" class=\"headerlink\" title=\"TCP Services\"></a>TCP Services</h4><ul>\n<li><em><strong>Connection-oriented service</strong></em>: Before the messages flow, the TCP connection(<strong>full-duplex, can send and receive simultaneously</strong>) existed between the sockets of the two processes. When application finishes sending messages, the connection must be dismantled.</li>\n<li><em><strong>Reliable Data</strong></em>: The communicating processes can rely on TCP to deliver all data sent without error and in the proper order.</li>\n</ul>\n<p>(Neither TCP nor UDP provides any encryption.)</p>\n<p>(the enhancement for TCP is SSL(Secure Socket Layer))</p>\n<h4 id=\"UDP-Services\"><a href=\"#UDP-Services\" class=\"headerlink\" title=\"UDP Services\"></a>UDP Services</h4><ul>\n<li><em><strong>Lightweight</strong></em>, providing minimal services.</li>\n<li><em><strong>Connectionless</strong></em>, no handshaking before two processes start to communicate</li>\n<li><em><strong>Unreliable data transfer</strong></em>, can’t guarantee the messages will ever reach the receiving process.</li>\n</ul>\n<p>(Services not provided by Internet Transport protocol include <em>timing</em>  and <em>throughput</em>.)</p>\n<h3 id=\"Application-layer-Protocols\"><a href=\"#Application-layer-Protocols\" class=\"headerlink\" title=\"Application-layer Protocols\"></a>Application-layer Protocols</h3><p>An application-layer protocol defines how an application’s processes, running on different end systems, <strong>pass messages to each other.</strong> In particular, an application-layer protocol defines:</p>\n<ul>\n<li><em><strong>The types of messages exchanged</strong></em>, for example, <em><strong>request messages</strong></em> and <em><strong>response messages</strong></em></li>\n<li><em><strong>The syntax of the various message types</strong></em>, such as the fields in the message and how the fields are delineated</li>\n<li><em><strong>The semantics of the fields</strong></em></li>\n<li><em><strong>Rules for determining when and how a process sends messages and responds to messages</strong></em></li>\n</ul>\n<h2 id=\"Web-and-HTTP\"><a href=\"#Web-and-HTTP\" class=\"headerlink\" title=\"Web and HTTP\"></a>Web and HTTP</h2><h3 id=\"Overview-of-HTTP\"><a href=\"#Overview-of-HTTP\" class=\"headerlink\" title=\"Overview of HTTP\"></a>Overview of HTTP</h3><p>Some Web terminologies: </p>\n<ul>\n<li><em><strong>Web Page</strong></em>: a Web page consists of objects.</li>\n<li>a <em><strong>object</strong></em>: file. (can be <code>.HTML/.JPEG/.mp4 file</code> and so on)</li>\n<li><em><strong>URL(uniform resource locator)</strong></em>: consists of hostname and path name.(like as <code>http://www.someschool.edu/someDepartment/picture.gif</code>)</li>\n<li><em><strong>Web browser</strong></em>: implement the client side of HTTP</li>\n<li><em><strong>Web server</strong></em>: implement the server side of HTTP, house Web objects, each addressable by a URL</li>\n</ul>\n<p>HTTP(HyperText Transfer Protocol) is the Web’s application-layer protocol.</p>\n<p>HTTP protocol defines how Web clients request Web pages from Web servers and how servers transfer Web pages to clients.</p>\n<p><strong>HTTP is a stateless protocol. An HTTP server maintains no information about the clients.</strong></p>\n<h3 id=\"Non-Persistent-and-Persistent-Connections\"><a href=\"#Non-Persistent-and-Persistent-Connections\" class=\"headerlink\" title=\"Non-Persistent and Persistent Connections\"></a>Non-Persistent and Persistent Connections</h3><ul>\n<li><p><em><strong>non-persistent connections</strong></em>: each requests/responses pair be sent <strong>over a separate TCP connection</strong>.</p>\n</li>\n<li><p><em><strong>persistent connections</strong></em>: <strong>over the same TCP connection.</strong></p>\n</li>\n</ul>\n<p>HTTP can use both non-persistent connections and persistent connections.</p>\n<p>(<strong>Default -&gt; persistent connections</strong>)</p>\n<h4 id=\"HTTP-with-Non-persistent-Connections\"><a href=\"#HTTP-with-Non-persistent-Connections\" class=\"headerlink\" title=\"HTTP with Non-persistent Connections\"></a>HTTP with Non-persistent Connections</h4><p>(<em>Actually, users can configure modern browsers to control the degree of parallelism</em>)</p>\n<p><em><strong>RTT(Round-Trip Time)</strong></em>: the time it takes for a small <em><strong>packet to travel from client to server and then back to the client</strong></em></p>\n<p><img src=\"https://media.geeksforgeeks.org/wp-content/uploads/1.-1.png\" alt=\"Detail process(https://www.geeksforgeeks.org/http-non-persistent-persistent-connection/)\"></p>\n<p>Defect: </p>\n<ul>\n<li><p>a brand-new connection must be established and maintained for each requested object. For each of these connections, TCP buffers must be allocated and TCP variables must be kept in both the client and server. (<strong>Consume a lot of resources</strong>)</p>\n</li>\n<li><p>each object suffers a delivery delay of two RTTs—one RTT to establish the TCP connection and one RTT to request and receive an object. (<strong>High Latency</strong>)</p>\n</li>\n</ul>\n<h4 id=\"HTTP-with-Persistent-Connections\"><a href=\"#HTTP-with-Persistent-Connections\" class=\"headerlink\" title=\"HTTP with Persistent Connections\"></a>HTTP with Persistent Connections</h4><p>A complete Web page can use a single TCP connection to transfer. (include the subsidiary resources)</p>\n<p>Typically, the HTTP server closes a connection when it isn’t used for a certain time (a configurable timeout interval).</p>\n<p><img src=\"https://media.geeksforgeeks.org/wp-content/uploads/2.-1.png\" alt=\"Detail process(https://www.geeksforgeeks.org/http-non-persistent-persistent-connection/)\"></p>\n<h3 id=\"HTTP-Message-Format\"><a href=\"#HTTP-Message-Format\" class=\"headerlink\" title=\"HTTP Message Format\"></a>HTTP Message Format</h3><h4 id=\"HTTP-Request-Message\"><a href=\"#HTTP-Request-Message\" class=\"headerlink\" title=\"HTTP Request Message\"></a>HTTP Request Message</h4>\n    <pre><code class=\"lang-http\"><span class=\"hljs-keyword\">GET</span> <span class=\"hljs-string\">/somedir/page.html</span> <span class=\"hljs-meta\">HTTP/1.1</span>\n<span class=\"hljs-attribute\">Host</span><span class=\"hljs-punctuation\">: </span>www.someschool.edu\n<span class=\"hljs-attribute\">Connection</span><span class=\"hljs-punctuation\">: </span>close\n<span class=\"hljs-attribute\">User-agent</span><span class=\"hljs-punctuation\">: </span>Mozilla/5.0\n<span class=\"hljs-attribute\">Accept-language</span><span class=\"hljs-punctuation\">: </span>fr\n</code></pre>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2021/05/9a6abb731851f39b.jpg\" alt=\"Common Format\"></p>\n<p>(<em><strong>Entity body</strong></em>: when you use the <code>GET</code> method, the <code>Entity body</code> is void. <em>If the value of the method field is POST , then the entity body contains what the user entered into the form fields.</em>)</p>\n<p>(<strong>A request generated with a form does not necessarily use the POST method</strong>)</p>\n<h4 id=\"HTTP-Response-Message\"><a href=\"#HTTP-Response-Message\" class=\"headerlink\" title=\"HTTP Response Message\"></a>HTTP Response Message</h4>\n    <pre><code class=\"lang-http\"><span class=\"hljs-string\">HTTP/1.1</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-string\">OK</span>\n<span class=\"hljs-attr\">Connection:</span> <span class=\"hljs-string\">close</span>\n<span class=\"hljs-attr\">Date:</span> <span class=\"hljs-string\">Tue,</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-string\">Aug</span> <span class=\"hljs-number\">2015 15:44:04 </span><span class=\"hljs-string\">GMT</span>\n<span class=\"hljs-attr\">Server:</span> <span class=\"hljs-string\">Apache/2.2.3</span> <span class=\"hljs-string\">(CentOS)</span>\n<span class=\"hljs-attr\">Last-Modified:</span> <span class=\"hljs-string\">Tue,</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-string\">Aug</span> <span class=\"hljs-number\">2015 15:11:03 </span><span class=\"hljs-string\">GMT</span>\n<span class=\"hljs-attr\">Content-Length:</span> <span class=\"hljs-number\">6821</span>\n<span class=\"hljs-attr\">Content-Type:</span> <span class=\"hljs-string\">text/html</span>\n<span class=\"hljs-string\">(data</span> <span class=\"hljs-string\">data</span> <span class=\"hljs-string\">data</span> <span class=\"hljs-string\">data</span> <span class=\"hljs-string\">data</span> <span class=\"hljs-string\">...)</span>\n</code></pre>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2021/05/ab137fcf56c5f4f9.jpg\" alt=\"Common Format\"></p>\n<p>Common Status Code and Phrase:</p>\n<ul>\n<li><code>200 OK</code> -&gt; Request succeeded and the information is returned in the response.</li>\n<li><code>301 Moved Permanently</code> -&gt;　 Requested object has been permanently moved; the new URL is specified in <code>Location:　</code> header of the response message. The client software will automatically retrieve the new URL.</li>\n<li><code>400 Bad Request</code> -&gt;　General Error Code.</li>\n<li><code>404 Not Found</code> -&gt;  The requested document does not exist on this server.</li>\n<li><code>505 HTTP Version Not Supported</code> -&gt;　The requested HTTP protocol version is not supported by the server.</li>\n</ul>\n<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p> It is often desirable for a Web site to identify users, either because the server wishes to restrict user access or because it wants to serve content as a function of the user identity. For these purposes, HTTP uses cookies.</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2021/05/a97060f1a47515b1.jpg\"></p>\n<h3 id=\"Web-Caching\"><a href=\"#Web-Caching\" class=\"headerlink\" title=\"Web Caching\"></a>Web Caching</h3><p>Web cache is <em><strong>proxy server.</strong></em></p>\n<p>Web cache is both a <strong>client</strong> and <strong>server</strong>.</p>\n<p><em>Web cache can satisfy HTTP requests on the behalf of an origin Web server.</em></p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2021/05/6f73b413fcea0c5b.jpg\" alt=\"Web cache\"></p>\n<h3 id=\"The-Conditional-GET\"><a href=\"#The-Conditional-GET\" class=\"headerlink\" title=\"The Conditional GET\"></a>The Conditional GET</h3><p>A mechanism that <em><strong>allows a cache to verify that its objects are up to date.</strong></em></p>\n<p>Firstly, a <strong>proxy server</strong> sends a request message to <strong>Web server</strong>:</p>\n\n    <pre><code class=\"lang-http\"><span class=\"hljs-keyword\">GET</span> <span class=\"hljs-string\">/there/is/test.gif</span> <span class=\"hljs-meta\">HTTP/1.1</span>\n<span class=\"hljs-attribute\">Host</span><span class=\"hljs-punctuation\">: </span>www.likeajoke.com\n</code></pre>\n<p>Secondly, <strong>Web server</strong> responses the message.</p>\n\n    <pre><code class=\"lang-http\"><span class=\"hljs-string\">HTTP/1.1</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-string\">OK</span>\n<span class=\"hljs-attr\">Date:</span> <span class=\"hljs-string\">Thu,</span> <span class=\"hljs-number\">27</span> <span class=\"hljs-string\">May</span> <span class=\"hljs-number\">2021 11:15:30</span>\n<span class=\"hljs-attr\">Server:</span> <span class=\"hljs-string\">Apache/1.3.0</span> <span class=\"hljs-string\">(CentOS)</span>\n<span class=\"hljs-attr\">Last-Modified:</span> <span class=\"hljs-string\">Thu,</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-string\">May</span> <span class=\"hljs-number\">2021 10:15:27</span>\n<span class=\"hljs-attr\">Content-Type:</span> <span class=\"hljs-string\">image/gif</span>\n<span class=\"hljs-string\">(Entity</span> <span class=\"hljs-string\">body...)</span>\n</code></pre>\n<p><em><strong>The cache stores the last-modified date along with the object.</strong></em></p>\n<p>We assume another browser requests the same object via the cache one week later, and the object is still in the cache. In actual situation, the object may be upgraded. So <em><strong>the cache performs an up-to-date check by issuing a conditional GET</strong></em>.</p>\n<p>Like this:</p>\n\n    <pre><code class=\"lang-http\"><span class=\"hljs-keyword\">GET</span> <span class=\"hljs-string\">/there/is/test.gif</span> <span class=\"hljs-meta\">HTTP/1.1</span>\n<span class=\"hljs-attribute\">Host</span><span class=\"hljs-punctuation\">: </span>www.likeajoke.com\n<span class=\"hljs-attribute\">If-modified-since</span><span class=\"hljs-punctuation\">: </span>Thu, 20 May 2021 10:15:27\n</code></pre>\n<p><em><strong>This conditional GET is telling the server to send the object only if the object has been modified since the specified date.</strong></em></p>\n<p>If the object is original, so the web server will response like this:</p>\n\n    <pre><code class=\"lang-http\"><span class=\"hljs-string\">HTTP/1.1</span> <span class=\"hljs-number\">304</span> <span class=\"hljs-string\">Not</span> <span class=\"hljs-string\">Modified</span>\n<span class=\"hljs-attr\">Data:</span> <span class=\"hljs-string\">Fri,</span> <span class=\"hljs-number\">28</span> <span class=\"hljs-string\">May</span> <span class=\"hljs-number\">2021 10:20:27</span>\n<span class=\"hljs-attr\">Server:</span> <span class=\"hljs-string\">Apache/1.3.0</span> <span class=\"hljs-string\">(CentOS)</span>\n<span class=\"hljs-string\">(Entity</span> <span class=\"hljs-string\">Body</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">empty.)</span>\n</code></pre>\n<p>If the object has not been modified, the response message is include any object.</p>\n","categories":[],"tags":[]}